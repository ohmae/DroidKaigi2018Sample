apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.ben-manes.versions'

def applicationName = "DroidKaigi2018Sample"
def versionMajor = 0
def versionMinor = 0
def versionPatch = 1

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "net.mm2d.droidkaigi2018sample"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        vectorDrawables.useSupportLibrary = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix = ".debug"
            versionNameSuffix = "d"
            manifestPlaceholders = [app_name: "D:DroidKaigi2018Sample"]
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [app_name: "@string/app_name"]
        }
    }
    applicationVariants.all { variant ->
        if (variant.buildType.name != "release") {
            return
        }
        variant.outputs.all {
            outputFileName = "${applicationName}-${versionName}.apk"
        }
    }
}

repositories {
    maven {
        url 'https://ohmae.github.com/maven'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "com.google.android.material:material:1.3.0"
    implementation "net.mm2d:log:0.9.3"
    implementation "net.mm2d:log-android:0.9.3"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    testImplementation "junit:junit:4.13.2"
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(candidate.version)
    }
}
